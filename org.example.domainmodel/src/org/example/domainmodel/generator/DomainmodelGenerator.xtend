/*
 * generated by Xtext 2.25.0
 */
package org.example.domainmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
//import org.example.domainmodel.domainmodel.Entity
import org.example.domainmodel.domainmodel.Domainmodel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DomainmodelGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		/**
		 * fsa.generateFile('greetings.txt', 'People to greet: ' + 
			resource.allContents
				.filter(Entity)
				.map[name]
				.join(', '))
				* 
				*/
		val root = resource.allContents.head as Domainmodel;
		if (root !== null) {
 			var path = "generated/" + resource.getURI().lastSegment + "/"
 			fsa.generateFile(path+"logic_i.imp", TextGenerator.toText(root))
 		}		
	}
}
